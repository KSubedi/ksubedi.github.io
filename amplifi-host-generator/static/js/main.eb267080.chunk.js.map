{"version":3,"sources":["Processor.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Processor","json","jsonData","JSON","parse","devices","outputText","forEach","node","Object","keys","key","device","connection","ip","push","getHostName","error","console","str","replace","match","replacement","RegExp","this","escapeRegExp","output","description","Date","getUTCMilliseconds","toString","log","replaceAll","toLowerCase","App","useState","inputJson","setInputJson","setOuput","className","id","href","value","onChange","e","target","cols","rows","type","onClick","processedOutput","process","processJson","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAAaA,EAAb,qGACgBC,GAAuB,IAAD,OACpC,IACC,IAAMC,EAAWC,KAAKC,MAAMH,GACtBI,EAAiB,GACnBC,EAAa,GAmBjB,OAjBAJ,EAASK,SAAQ,SAAUC,GAC1BC,OAAOC,KAAKF,GAAMD,SAAQ,SAAAI,GACzB,IAAMC,EAASJ,EAAKG,GAGnBC,EAAOC,YACPD,EAAOE,IAEPT,EAAQU,KAAKH,SAKhBP,EAAQE,SAAQ,SAAAK,GACfN,GAAU,UAAOM,EAAOE,GAAd,YAAoB,EAAKE,YAAYJ,GAArC,aAGJN,EACN,MAAOW,GAER,OADAC,QAAQD,MAAMA,GACP,kBA3BV,mCA+BqBE,GACnB,OAAOA,EAAIC,QAAQ,sBAAuB,UAhC5C,iCAmCmBD,EAAaE,EAAeC,GAC7C,OAAOH,EAAIC,QAAQ,IAAIG,OAAOC,KAAKC,aAAaJ,GAAQ,MAAM,kBAAMC,OApCtE,kCAwC4BV,GAC1B,IAAIc,EAAiBd,EAAOe,aAC3Bf,EAAOE,KACN,IAAIc,MAAQC,qBAAqBC,WAWnC,OATAZ,QAAQa,IAAIL,GAEZA,EAASF,KAAKQ,WAAWN,EAAQ,IAAK,KACtCA,EAASF,KAAKQ,WAAWN,EAAQ,IAAK,KACtCA,EAASF,KAAKQ,WAAWN,EAAQ,SAAK,IAGtCA,GAFAA,EAASF,KAAKQ,WAAWN,EAAQ,IAAK,KAEtBO,kBApDlB,KCyDeC,MArDf,WAAgB,IAAD,EACoBC,mBAAS,IAD7B,mBACPC,EADO,KACIC,EADJ,OAEaF,mBAAS,IAFtB,mBAEPT,EAFO,KAECY,EAFD,KAUd,OACC,qBAAKC,UAAU,YAAf,SACC,sBAAKA,UAAU,UAAf,UACC,wDAEA,sRACA,oBAAIC,GAAG,aAAP,wBACA,oDAAsB,mBAAGC,KAAK,qBAAR,gCAAtB,0LAAwQ,kDAAxQ,6GACA,+JAAiI,8CAAjI,2BAEA,4CACA,0BACCF,UAAU,eACVG,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAAaO,EAAEC,OAAOH,QACvCI,KAAM,GACNC,KAAM,KAEP,uBACA,qBAAKR,UAAU,cAAf,SACC,wBACCA,UAAU,kBACVS,KAAK,SACLC,QAAS,kBA7BM,WACnB,IAAMC,EAAkBlD,EAAUmD,QAAQf,GAE1CE,EAASY,GA0BUE,IAHhB,uBAQD,uBACA,wCACA,0BACCb,UAAU,eACVG,MAAOhB,EACP2B,UAAU,EACVP,KAAM,GACNC,KAAM,KACP,uBACA,oEAA4B,mBAAGN,KAAK,4BAAR,qCCrCjBa,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eb267080.chunk.js","sourcesContent":["export class Processor {\n\tstatic process(json: string): string {\n\t\ttry {\n\t\t\tconst jsonData = JSON.parse(json);\n\t\t\tconst devices: any[] = [];\n\t\t\tlet outputText = \"\";\n\n\t\t\tjsonData.forEach(function (node: any) {\n\t\t\t\tObject.keys(node).forEach(key => {\n\t\t\t\t\tconst device = node[key];\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tdevice.connection &&\n\t\t\t\t\t\tdevice.ip\n\t\t\t\t\t) {\n\t\t\t\t\t\tdevices.push(device);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdevices.forEach(device => {\n\t\t\t\toutputText += `${device.ip} ${this.getHostName(device)}.lan\\n`;\n\t\t\t});\n\n\t\t\treturn outputText;\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\treturn \"Invalid Data\";\n\t\t}\n\t}\n\n\tstatic escapeRegExp(str: string) {\n\t\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n\t}\n\n\tstatic replaceAll(str: string, match: string, replacement: string): string {\n\t\treturn str.replace(new RegExp(this.escapeRegExp(match), 'g'), () => replacement);\n\t}\n\n\n\tprivate static getHostName(device: any) {\n\t\tlet output: string = device.description ||\n\t\t\tdevice.ip ||\n\t\t\t(new Date()).getUTCMilliseconds().toString();\n\n\t\tconsole.log(output);\n\n\t\toutput = this.replaceAll(output, \" \", \"-\");\n\t\toutput = this.replaceAll(output, \".\", \"-\");\n\t\toutput = this.replaceAll(output, \"‚Äô\", \"\");\n\t\toutput = this.replaceAll(output, \"'\", \"\");\n\n\t\toutput = output.toLowerCase();\n\n\t\treturn output;\n\t}\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { Processor } from './Processor';\n\nfunction App() {\n\tconst [inputJson, setInputJson] = useState(\"\");\n\tconst [output, setOuput] = useState(\"\");\n\n\tconst processJson = () => {\n\t\tconst processedOutput = Processor.process(inputJson);\n\n\t\tsetOuput(processedOutput);\n\t}\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"wrapper\">\n\t\t\t\t<h2>Amplifi Host Generator</h2>\n\n\t\t\t\t<p>This web app lets you convert JSON data you get by inspecting Ubiquiti Amplifi router&#39;s Web UI to hosts file format. This was built so I could export hosts from my router&#39;s DHCP client table to pihole so IP&#39;s could resolve to readable hostnames.</p>\n\t\t\t\t<h3 id=\"how-to-use\">How to use</h3>\n\t\t\t\t<p>With Chrome, go to <a href=\"http://amplifi.lan\">http://amplifi.lan</a> from your local network, login and go to System Info on top right corner. Right click and hit &#39;Inspect&#39; to open the devtools, then go to the network tab. You should see an entry for <code>info-async.php</code> on the network connection list, click that and go to the response sub tab. Copy all of that json info.</p>\n\t\t\t\t<p>Paste the JSON you copied into the input field below and hit process to get the hosts file list. You can then paste this into <code>/etc/hosts</code> file on your pihole.</p>\n\n\t\t\t\t<h3>Input JSON</h3>\n\t\t\t\t<textarea\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\tvalue={inputJson}\n\t\t\t\t\tonChange={(e) => setInputJson(e.target.value)}\n\t\t\t\t\tcols={30}\n\t\t\t\t\trows={10}>\n\t\t\t\t</textarea>\n\t\t\t\t<br />\n\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tonClick={() => processJson()}\n\t\t\t\t\t>\n\t\t\t\t\t\tProcess\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\t\t\t\t<h3>Output</h3>\n\t\t\t\t<textarea\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\tvalue={output}\n\t\t\t\t\tdisabled={true}\n\t\t\t\t\tcols={30}\n\t\t\t\t\trows={10}></textarea>\n\t\t\t\t<hr/>\n\t\t\t\t<pre>Made in Colorado üèî by <a href=\"https://kaushalsubedi.com\">Kaushal Subedi</a></pre>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}